Les Notions :

Attribut : Est une variable dans une classe (scope)

Espace de noms : Conteneur qui permet aux développeurs d'empaqueter les différentes fonctionnalités d'un programme
                 sous un même nom d'application.

Classe : Définit les proprités (attribut) qui sont rattaché à l'objet.

Objet : Une instance (un "exemplaire") d'une classe.

Scope/Contexte : Détermine l'accessibilité, la portée d'une variable (Locale ou Globale).

Propriété : Une caractéristique d'un objet (sa couleur par exemple).

Méthode : Une capacité/action d'un objet (changer de couleur par exemple) donc une méthode est une Fonction.

Constructeur : Une méthode appelée au moment de l'instantiation.

Héritage : Une classe peut hériter des caractéristiques et des fonctionnalités d'une autre classe.

Encapsulation : Une classe définit uniquement les caractéristiques de son objet, une méthode définit uniquement la façon dont elle s'exécute.
                On regroupe donc les données et les méthodes qui utilisent ces données.

Abstraction : La conjonction entre l'utilisation de l'héritage, de méthodes ou de propriétés d'un objet pour simuler un modèle de la réalité.

Polymorphisme : Poly signifie « plusieurs » et morphisme signifie « formes ». Cela signifie que différentes classes peuvent définir
                la même méthode ou la même propriété.

Incrémentation : Augmentation de la valeur (d'une variable) à chaque exécution d'un programme.

Décrémentation : Inverse de l'incrémentation

Instanciation : est l'action d'instancier, de créer un objet à partir d'un modèle.
                 Elle est réalisée par la composition de deux opérations : l'allocation et l'initialisation.
                 L'allocation consiste à réserver un espace mémoire au nouvel objet. L'initialisation consiste à fixer l'état du nouvel objet.

Implémentation : est l'&ction de fabriquer/remplir le corps d'une fonction.

Static : Le mot-clé static permet définir une méthode statique d'une classe. Les méthodes statiques ne sont pas disponibles sur 
         les instances d'une classe.

Hoisting : suggère que les déclarations de variables et de fonctions sont déplacées physiquement en haut de votre code, 
           mais ce n'est pas ce qui se passe en fait. A la place, les déclarations de variables et de fonctions sont mises
           en mémoire pendant la phase de compilation, mais restent exactement là où vous les avez tapées dans votre code.
